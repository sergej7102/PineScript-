//Ссылка на индикатор:https://tr.tradingview.com/script/uLY2TQdm/

//Видео:https://www.youtube.com/watch?v=vFAlz3MgsR4

//Описание:Этот скрипт представляет собой простой и эффективный командный модуль strategy(), 
//который может адаптироваться под ваши торговые сигналы. Он создаёт отчёт о бэк-тестировании на основе заданных вами входных и выходных параметров.

//Что он делает?
//Его можно использовать не только для тестирования одной системы, но и для объединения независимых сигналов в одну систему!
//Таким образом, становится возможным анализировать успешность более сложных стратегий.

//Как это работает?
//Определите булевы условия для входа и выхода, используя тип данных integer, для системы, которую вы хотите протестировать, и используйте их в модуле как источник.



//@version=5
// Объявление версии Pine Script (версия 5)
strategy("Backtesting Module", overlay=true, initial_capital=1000, 
 default_qty_type=strategy.percent_of_equity, default_qty_value=100, 
 commission_type=strategy.commission.percent, commission_value=0.04)
// Создание стратегии с названием "Backtesting Module", которая будет отображаться на графике (overlay=true).
// Начальный капитал установлен на 1000, размер позиции по умолчанию - 100% от капитала, комиссия - 0.04%.

//

// Default Test - Golden & Death Cross (When you enter your own conditions it'll be neutralized.)
// Тест по умолчанию - Золотой и Смертельный крест (если вы введете свои условия, этот тест будет отключен).
default_long  = ta.crossover(ta.sma(close, 50), ta.sma(close, 200))
// Условие для длинной позиции: 50-периодная SMA пересекает 200-периодную SMA снизу вверх (Золотой крест).
default_short = ta.crossunder(ta.sma(close, 50), ta.sma(close, 200))
// Условие для короткой позиции: 50-периодная SMA пересекает 200-периодную SMA сверху вниз (Смертельный крест).

// ╠═══════════════════════════ Backtesting Module ════════════════════════════╣

// Source Inputs
// Входные данные для стратегии
string tt_l = "Если у вас нет длительных условий, отключите этот параметр."
// Подсказка для параметра длинных позиций.
string tt_s = "Если у вас нет коротких условий, отключите этот параметр."
// Подсказка для параметра коротких позиций.
string tt_0 = 
 "Чтобы протестировать собственную систему, вы должны ввести свои условия в виде ряда целых чисел (1 или 0). " + 
 "В этом контексте 1 представляет истину, а 0 представляет ложь для каждого условия. " + 
 "Вы можете получить входные данные из другого индикатора, используя эти параметры. " + 
 "Для получения более подробной информации см. описание модуля бэктестинга'."

// Подсказка для ввода пользовательских условий.
string gr_l = "ВВЕДИТЕ ВАШИ ДЛИННЫЕ УСЛОВИЯ"
// Группа для ввода условий длинных позиций.
string gr_s = "ВВЕДИТЕ ВАШИ КОРОТКИЕ УСЛОВИЯ"
// Группа для ввода условий коротких позиций.
go_long     = input.bool(group=gr_l, inline="l1", tooltip=tt_l, defval=true, title="Long ")
// Входной параметр для активации длинных позиций.
go_short    = input.bool(group=gr_s, inline="s1", tooltip=tt_s, defval=true, title="Short ")
// Входной параметр для активации коротких позиций.
long_entry  = input(group=gr_l, inline="l2", tooltip=tt_0, defval=close, title="Entry ")
// Входной параметр для условия входа в длинную позицию.
long_exit   = input(group=gr_l, inline="l2", tooltip=tt_0, defval=close, title="   Exit ")
// Входной параметр для условия выхода из длинной позиции.
short_entry = input(group=gr_s, inline="s2", tooltip=tt_0, defval=close, title="Entry ")
// Входной параметр для условия входа в короткую позицию.
short_exit  = input(group=gr_s, inline="s2", tooltip=tt_0, defval=close, title="   Exit")
// Входной параметр для условия выхода из короткой позиции.

// Configuration Inputs
// Входные данные для конфигурации
string grc = "CONFIGURATION"
// Группа для конфигурационных параметров.
string tt1 = "Введите смещение часового пояса.\nНапример, GMT+1 Berlin"
// Подсказка для ввода временной зоны.
trade_mode = input.string(title="Trade ", defval="Both ", options=["Both ", "Long ", "Short "], group=grc)
// Входной параметр для выбора режима торговли: длинные, короткие или оба.
set_gmt    = input.int(title="GMT+", defval=+1, minval=-12, maxval=14, tooltip=tt1, group=grc)
// Входной параметр для установки временной зоны.
start_ts   = timestamp("01 Jan 2025 03:00")
// Начальная временная метка.
end_ts     = timestamp("31 Dec 2050 03:00")
// Конечная временная метка.
start_i    = input.time(group=grc, defval=start_ts, title="Start ")
// Входной параметр для установки времени начала тестирования.
end_i      = input.time(group=grc, defval=end_ts, title="End ")
// Входной параметр для установки времени окончания тестирования.
sh_entry   = input.bool(defval=false, title="Entry Price ")
// Входной параметр для отображения цены входа.
sh_avg     = input.bool(defval=false, title="Average Entry Price ")
// Входной параметр для отображения средней цены входа.
sh_barc    = input.bool(defval=false, title="Barcolor ")
// Входной параметр для окрашивания баров в зависимости от позиции.

// Table Inputs
// Входные данные для таблицы
string grt = "TABLE SETTINGS"
// Группа для настроек таблицы.
tb_pos  = input.string(title="Position", defval="Right 1", group=grt,
 options=["Left 1", "Left 2", "Center 1", "Center 2", "Right 1", "Right 2"])
// Входной параметр для выбора позиции таблицы на графике.
c1 = input.color(#686868, "", group=grt, inline="c")
// Входной параметр для выбора цвета 1.
c2 = input.color(#8c00ff, "", group=grt, inline="c")
// Входной параметр для выбора цвета 2.
c3 = input.color(#00ff00, "", group=grt, inline="c")
// Входной параметр для выбора цвета 3.
c4 = input.color(#ff4242, "", group=grt, inline="c")
// Входной параметр для выбора цвета 4.
c5 = input.color(#00bbff, "", group=grt, inline="c")
// Входной параметр для выбора цвета 5.
c6 = input.color(#ff9800, "", group=grt, inline="c")
// Входной параметр для выбора цвета 6.

// Direction and Interval Calcs
// Расчет направления и интервала
strategy.risk.allow_entry_in(
 trade_mode == "Long "  ? strategy.direction.long  : 
 trade_mode == "Short " ? strategy.direction.short : 
 strategy.direction.all)
// Разрешение входа в позиции в зависимости от выбранного режима торговли.
offset   = set_gmt * 1000 * 60 * 60
// Расчет смещения временной зоны.
start    = start_i == start_ts ? ta.valuewhen(bar_index==0, time, 0) + offset : start_i + offset
// Расчет времени начала тестирования с учетом временной зоны.
end      = end_i == end_ts ? timenow + offset : end_i + offset
// Расчет времени окончания тестирования с учетом временной зоны.
interval = start <= time + offset and end >= time + offset
// Определение интервала тестирования.

// Run
// Условия для запуска стратегии
f_run(x) => not (x == open or x == high or x == low or x == close or x == hl2 or x == hlc3 or x == ohlc4 or x == hlcc4)
// Функция для проверки, что входные данные не являются стандартными значениями (цена открытия, закрытия и т.д.).
run_long  = go_long  and f_run(long_entry)  and f_run(long_exit) 
// Условие для запуска длинных позиций.
run_short = go_short and f_run(short_entry) and f_run(short_exit)
// Условие для запуска коротких позиций.

// Don't Run
// Условие для отключения стратегии
none = not (run_long or run_short)
// Если ни одно из условий не выполнено, стратегия не запускается.

// Entry & Exit Orders
// Условия для входа и выхода из позиций
if interval
    if none
        if default_long
            strategy.entry(id="Long", direction=strategy.long, comment="Golden Cross")
        // Вход в длинную позицию при выполнении условия Золотого креста.
        if default_short
            strategy.entry(id="Short", direction=strategy.short, comment="Death Cross")
        // Вход в короткую позицию при выполнении условия Смертельного креста.
    if run_long
        if long_exit == 1
            strategy.close(id="Long", comment="Long Exit")
        // Выход из длинной позиции при выполнении условия выхода.
        if long_entry == 1 
            strategy.close(id="Short", comment="Short Exit")
            strategy.entry(id="Long", direction=strategy.long, comment="Long Entry")
        // Вход в длинную позицию при выполнении условия входа.
    if run_short
        if short_exit == 1
            strategy.close(id="Short", comment="Short Exit")
        // Выход из короткой позиции при выполнении условия выхода.
        if short_entry == 1
            strategy.close(id="Long", comment="Long Exit")
            strategy.entry(id="Short", direction=strategy.short, comment="Short Entry")
        // Вход в короткую позицию при выполнении условия входа.
else
    strategy.close(id="Long", comment="Long Exit")
    strategy.close(id="Short", comment="Short Exit")
    // Закрытие всех позиций, если интервал тестирования не активен.
//

// Variables
// Переменные для отслеживания состояния стратегии
var int twl = 0   // Переменная для подсчета выигрышных длинных сделок.

var int tws = 0   // Переменная для подсчета выигрышных коротких сделок.
                  
var int tll = 0
                  // Переменная для подсчета проигрышных длинных сделок.
var int tls = 0
                  // Переменная для подсчета проигрышных коротких сделок.
das_capital = strategy.initial_capital
                  // Начальный капитал.
profit      = strategy.netprofit
                  // Чистая прибыль.
equity      = strategy.equity
                  // Текущий капитал (с учетом открытых позиций).
in_long     = strategy.position_size > 0
                  // Флаг, указывающий на наличие длинной позиции.
in_short    = strategy.position_size < 0
// Флаг, указывающий на наличие короткой позиции.
in_position = strategy.position_size != 0
// Флаг, указывающий на наличие открытой позиции.
trades      = strategy.closedtrades 
// Общее количество закрытых сделок.
trades_win  = strategy.wintrades
// Количество выигрышных сделок.
trades_loss = strategy.losstrades
// Количество проигрышных сделок.
bars        = ta.cum(interval ? 1 : 0)
// Количество баров в интервале тестирования.
r_pnl_p     = profit / das_capital * 100
// Реализованная прибыль в процентах от начального капитала.
unr_pnl_p   = (equity - das_capital) / das_capital * 100
// Нереализованная прибыль в процентах от начального капитала.
st_dir      = in_long ? 1 : in_short ? -1 : 0
// Направление текущей позиции (1 - длинная, -1 - короткая, 0 - нет позиции).
st_exit_l   = st_dir != 1  and st_dir[1] == 1
// Флаг выхода из длинной позиции.
st_exit_s   = st_dir != -1 and st_dir[1] == -1
// Флаг выхода из короткой позиции.
diff_win    = trades_win  - trades_win[1]
// Разница в количестве выигрышных сделок.
diff_loss   = trades_loss - trades_loss[1]
// Разница в количестве проигрышных сделок.
if st_exit_l
    twl += diff_win
    tll += diff_loss
// Обновление счетчиков выигрышных и проигрышных длинных сделок.
if st_exit_s 
    tws += diff_win
    tls += diff_loss
// Обновление счетчиков выигрышных и проигрышных коротких сделок.
win_ratio_l = twl / (twl + tll) * 100
// Процент выигрышных длинных сделок.
win_ratio_s = tws / (tws + tls) * 100
// Процент выигрышных коротких сделок.
win_ratio   = trades_win / trades * 100
// Общий процент выигрышных сделок.
r_pnl_c     = r_pnl_p >= 0   ? c3 : c4
// Цвет для отображения реализованной прибыли (зеленый или красный).
unr_pnl_c   = unr_pnl_p >= 0 ? c3 : c4
// Цвет для отображения нереализованной прибыли (зеленый или красный).

// Plots & Barcolor
// Построение графиков и окрашивание баров
plot(not sh_entry ? na : strategy.opentrades.entry_price(strategy.opentrades - 1), "Entry price", chart.fg_color, 2, plot.style_circles)
// Построение цены входа, если включено.
plot(not sh_avg ? na : strategy.position_avg_price, "Average Entry price", #2962ff, 2, plot.style_circles)
// Построение средней цены входа, если включено.
barcolor(not sh_barc ? na : st_dir==1 ? #00ff00 : st_dir==-1 ? #ff0000 : #333333, title="Barcolor")
// Окрашивание баров в зависимости от направления позиции.

// Table
// Создание таблицы для отображения результатов
pos = 
 tb_pos == "Left 1"   ? position.top_left   : tb_pos == "Left 2"   ? position.bottom_left : 
 tb_pos == "Center 1" ? position.top_center : tb_pos == "Center 2" ? position.bottom_center : 
 tb_pos == "Right 1"  ? position.top_right  : position.bottom_right
// Определение позиции таблицы на графике.
var table tb = table.new(pos, 5, 15, na, #5d606b, 3, #5d606b, 1)
// Создание таблицы с заданными параметрами.
f_print(x, y, c, t) => table.cell(tb, x-1, y-1, t, text_color=c)
// Функция для добавления текста в ячейку таблицы.
f_merge(x, y) => table.merge_cells(tb, x-1, y-1, 4, y-1)
// Функция для объединения ячеек таблицы.
f_txt_l(x) => trade_mode == "Short " or not run_long  ? "─" : x
// Функция для отображения текста для длинных позиций.
f_txt_s(x) => trade_mode == "Long "  or not run_short ? "─" : x
// Функция для отображения текста для коротких позиций.
if barstate.islastconfirmedhistory or barstate.isrealtime
    f_print(1, 1,  c1, "PNL") 
    f_print(1, 2,  c1, "Realized")
    f_print(1, 3,  c1, "Unrealized")
    f_print(1, 4,  c1, "REPORT")  
    f_print(1, 5,  c1, "Trades")  
    f_print(2, 5,  c1, "  Σ  ")  
    f_print(3, 5,  c1, " Win ")  
    f_print(4, 5,  c1, "Loss")  
    f_print(5, 5,  c1, "Win Rate")   
    f_print(1, 6,  c1, "Long")  
    f_print(1, 7,  c1, "Short")  
    f_print(1, 8,  c1, "Total")     
    f_print(1, 9,  c1, "INTERVAL [GMT+" + str.tostring(int(set_gmt)) + "]") 
    f_print(1, 10, c1, "Start")  
    f_print(1, 11, c1, "End")
    f_print(1, 12, c1, "Bars")
    f_print(2, 2,  r_pnl_c, "% " + str.tostring(r_pnl_p, "#.##")) 
    f_print(2, 3,  unr_pnl_c, not in_position ? "─" : "% " + str.tostring(unr_pnl_p, "#.##"))
    f_print(2, 6,  c2, f_txt_l(str.tostring(twl + tll)))
    f_print(3, 6,  c3, f_txt_l(str.tostring(twl)))
    f_print(4, 6,  c4, f_txt_l(str.tostring(tll)))
    f_print(5, 6,  c5, f_txt_l("% " + str.tostring(win_ratio_l, "#.##")))
    f_print(2, 7,  c2, f_txt_s(str.tostring(tws + tls)))
    f_print(3, 7,  c3, f_txt_s(str.tostring(tws)))
    f_print(4, 7,  c4, f_txt_s(str.tostring(tls)))
    f_print(5, 7,  c5, f_txt_s("% " + str.tostring(win_ratio_s, "#.##")))
    f_print(2, 8,  c2, str.tostring(trades_win + trades_loss))  
    f_print(3, 8,  c3, str.tostring(trades_win))  
    f_print(4, 8,  c4, str.tostring(trades_loss))  
    f_print(5, 8,  c5, "% " + str.tostring(win_ratio, "#.##")) 
    f_print(2, 10, c6, str.format_time(start, "dd.MM.yyyy - HH:mm"))
    f_print(2, 11, c6, str.format_time(end, "dd.MM.yyyy - HH:mm"))
    f_print(2, 12, c6, str.tostring(bars))
    f_merge(1, 1), f_merge(1, 9), f_merge(2, 3),  f_merge(2, 11)
    f_merge(1, 4), f_merge(2, 2), f_merge(2, 10), f_merge(2, 12)
    if none 
        table.cell(tb, 0, 12, "\n// Deafult Test : Golden & Death Cross\n ", text_color=c1, 
         tooltip="При вводе собственных условий тест по умолчанию будет нейтрализован."), f_merge(1, 13)
//    


// Конец скрипта.
plotshape(barstate.isfirst, "@ dg_factor", shape.flag, location.bottom, #00000000, editable=false)
// Отображение формы на первом баре (для отладки).
